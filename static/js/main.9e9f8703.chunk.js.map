{"version":3,"sources":["components/IdentityInformation.js","components/EducationalExperienceItem.js","components/EducationalExperience.js","components/PracticalExperienceItem.js","components/PracticalExperience.js","App.js","index.js"],"names":["IdentityInformation","props","state","nameInputValue","name","emailInputValue","email","phoneInputValue","phone","updateNameInputValue","bind","updateEmailInputValue","updatePhoneInputValue","e","this","setState","target","value","previousProps","previousState","isEditing","updateIdentityInformation","nameField","type","id","placeholder","maxLength","onChange","emailField","minLength","phoneField","htmlFor","Component","EducationalExperienceItem","schoolNameInputValue","schoolName","studyTitleInputValue","studyTitle","startDateInputValue","format","startDate","endDateInputValue","endDate","startDateInvalid","endDateInvalid","updateSchoolNameInputValue","updateStudyTitleInputValue","updateStartDateInputValue","updateEndDateInputValue","parsedStartDate","parse","Date","Number","isNaN","getTime","parsedEndDate","updateItem","index","schoolNameField","className","studyTitleField","startDateClasses","endDateClasses","startDateField","endDateField","deleteButton","onClick","deleteItem","startDateInvalidAlert","endDateInvalidAlert","key","EducationalExperience","items","educationalExperienceItems","addNewItem","item","map","v","i","concat","filter","updateEducationInformation","addItemButton","PracticalExperienceItem","companyNameInputValue","companyName","positionTitleInputValue","positionTitle","mainTasksInputValue","mainTasks","updateCompanyNameInputValue","updatePositionTitleInputValue","updateMainTasksInputValue","companyNameField","positionTitleField","mainTasksField","PracticalExperience","practicalExperienceItems","updateWorkInformation","App","updateCVInformation","editCV","button","onSubmit","preventDefault","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e9f8703.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './IdentityInformation.css';\n\nclass IdentityInformation extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            nameInputValue: props.name,\n            emailInputValue: props.email,\n            phoneInputValue: props.phone,\n        };\n        this.updateNameInputValue = this.updateNameInputValue.bind(this);\n        this.updateEmailInputValue = this.updateEmailInputValue.bind(this);\n        this.updatePhoneInputValue = this.updatePhoneInputValue.bind(this);\n    }\n\n    updateNameInputValue(e) {\n        this.setState({\n            nameInputValue: e.target.value,\n        });\n    }\n\n    updateEmailInputValue(e) {\n        this.setState({\n            emailInputValue: e.target.value,\n        });\n    }\n    \n    updatePhoneInputValue(e) {\n        this.setState({\n            phoneInputValue: e.target.value,\n        });\n    }\n\n    componentDidUpdate(previousProps, previousState) {\n        if (previousProps.isEditing && !this.props.isEditing) {\n            this.props.updateIdentityInformation(\n                previousState.nameInputValue,\n                previousState.emailInputValue,\n                previousState.phoneInputValue,\n            );\n        }\n    }\n\n    render() {\n\n        const nameField = (this.props.isEditing)\n            ? <input\n                type= \"text\"\n                id= \"name\"\n                placeholder= \"Name\"\n                maxLength= \"45\"\n                value= {this.state.nameInputValue}\n                onChange= {this.updateNameInputValue}\n            ></input>\n            : <span id= \"name\">{this.props.name}</span>;\n\n        const emailField = (this.props.isEditing)\n            ? <input\n                type= \"email\"\n                id= \"email\"\n                minLength= \"6\"\n                maxLength= \"40\"\n                value= {this.state.emailInputValue}\n                onChange= {this.updateEmailInputValue}\n            ></input>\n            : <span id= \"email\">{this.props.email}</span>;\n\n        const phoneField = (this.props.isEditing)\n            ? <input\n                type= \"tel\"\n                id= \"phone\"\n                minLength= \"9\"\n                maxLength= \"15\"\n                value= {this.state.phoneInputValue}\n                onChange= {this.updatePhoneInputValue}\n            ></input>\n            : <span id= \"phone\">{this.props.phone}</span>;\n        \n        return (\n            <div id= \"identity-information\">\n                {nameField}\n                <div id= 'contact-info'>\n                    <label htmlFor= \"email\">Email: </label>\n                    {emailField}\n                    <label htmlFor= \"phone\">Phone: </label>\n                    {phoneField}\n                </div>\n            </div>\n        );\n    }\n}\n\nIdentityInformation.propTypes = {\n    name: PropTypes.string,\n    email: PropTypes.string,\n    phone: PropTypes.string,\n    isEditing: PropTypes.bool,\n    updateIdentityInformation: PropTypes.func,\n};\n\nexport default IdentityInformation;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { format, parse } from 'date-fns';\n\nclass EducationalExperienceItem extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            schoolNameInputValue: props.schoolName,\n            studyTitleInputValue: props.studyTitle,\n            startDateInputValue: format(props.startDate, 'yyyy/MM/dd'),\n            endDateInputValue: format(props.endDate, 'yyyy/MM/dd'),\n            startDateInvalid: false,\n            endDateInvalid: false,\n        }\n        this.updateSchoolNameInputValue = this.updateSchoolNameInputValue.bind(this);\n        this.updateStudyTitleInputValue = this.updateStudyTitleInputValue.bind(this);\n        this.updateStartDateInputValue = this.updateStartDateInputValue.bind(this);\n        this.updateEndDateInputValue = this.updateEndDateInputValue.bind(this);\n    }\n\n    updateSchoolNameInputValue(e) {\n        this.setState({\n            schoolNameInputValue: e.target.value,\n        });\n    }\n\n    updateStudyTitleInputValue(e) {\n        this.setState({\n            studyTitleInputValue: e.target.value,\n        });\n    }\n\n    updateStartDateInputValue(e) {\n        const parsedStartDate = parse(e.target.value, 'yyyy/MM/dd', new Date());\n        if (Number.isNaN(parsedStartDate.getTime())) {\n            this.setState({\n                startDateInvalid: true,\n            });\n        } else {\n            this.setState({\n                startDateInvalid: false,\n            });\n        }\n        this.setState({\n            startDateInputValue: e.target.value,\n        });\n    }\n\n    updateEndDateInputValue(e) {\n        const parsedEndDate = parse(e.target.value, 'yyyy/MM/dd', new Date());\n        if (Number.isNaN(parsedEndDate.getTime())) {\n            this.setState({\n                endDateInvalid: true,\n            });\n        } else {\n            this.setState({\n                endDateInvalid: false,\n            });\n        }\n        this.setState({\n            endDateInputValue: e.target.value,\n        });\n    }\n\n    componentDidUpdate(previousProps, previousState) {\n        if (previousState !== this.state) {\n            this.props.updateItem({\n                schoolName: this.state.schoolNameInputValue,\n                studyTitle: this.state.studyTitleInputValue,\n                startDate: !(this.state.startDateInvalid)\n                    ? parse(this.state.startDateInputValue, 'yyyy/MM/dd', new Date())\n                    : this.props.startDate,\n                endDate: !(this.state.endDateInvalid)\n                    ? parse(this.state.endDateInputValue, 'yyyy/MM/dd', new Date())\n                    : this.props.endDate,\n            }, this.props.index);\n        }\n    }\n\n    render() {\n        const schoolNameField = (this.props.isEditing)\n            ? <input\n                value= {this.state.schoolNameInputValue}\n                id= {`school-name-${this.props.index}`}\n                className= 'school-name'\n                onChange= {this.updateSchoolNameInputValue}\n            ></input>\n        : <span id= {`school-name-${this.props.index}`}>{this.props.schoolName}</span>;\n\n        const studyTitleField = (this.props.isEditing)\n            ? <input\n                value= {this.state.studyTitleInputValue}\n                id= {`study-title-${this.props.index}`}\n                className= 'study-title'\n                onChange= {this.updateStudyTitleInputValue}\n            ></input>\n        : <span id= {`study-title-${this.props.index}`}>{this.props.studyTitle}</span>;\n\n        const startDateClasses = (this.state.startDateInvalid)\n            ? 'date invalid-date'\n            : 'date';\n        const endDateClasses = (this.state.endDateInvalid)\n            ? 'date invalid-date'\n            : 'date';\n\n        const startDateField = (this.props.isEditing)\n            ? <input\n                value= {this.state.startDateInputValue}\n                id= {`start-date-${this.props.index}`}\n                className= {startDateClasses}\n                onChange= {this.updateStartDateInputValue}\n            ></input>\n        : <span id= {`start-date-${this.props.index}`}>{format(this.props.startDate, 'yyyy/MM/dd')}</span>;\n\n        const endDateField = (this.props.isEditing)\n            ? <input\n                value= {this.state.endDateInputValue}\n                id= {`end-date-${this.props.index}`}\n                className = {endDateClasses}\n                onChange= {this.updateEndDateInputValue}\n            ></input>\n        : <span id= {`end-date-${this.props.index}`}>{format(this.props.endDate, 'yyyy/MM/dd')}</span>;\n\n        const deleteButton = (this.props.isEditing)\n            ? <button\n                className= \"delete-educational-experience-item\"\n                onClick= {() => this.props.deleteItem(this.props.index)}>Delete\n            </button>\n            : null;\n\n        const startDateInvalidAlert = (this.state.startDateInvalid && this.props.isEditing)\n            ? <span className= \"date-alert\">Invalid date</span>\n            : <span></span>;\n        \n        const endDateInvalidAlert = (this.state.endDateInvalid && this.props.isEditing)\n            ? <span className= \"date-alert\">Invalid date</span>\n            : <span></span>;\n\n        return (\n            <div className= \"educational-experience-item\" key= {this.props.index}>\n                <div className= \"school-and-study\">\n                    <div className= \"school\">\n                        <label htmlFor= {`school-name-${this.props.index}`}>School: </label>\n                        {schoolNameField}\n                    </div>\n                    <div className= \"study\">\n                        <label htmlFor= {`study-title-${this.props.index}`}>Title of study: </label>\n                        {studyTitleField}\n                    </div>\n                </div>\n                <div className= \"date-container\">\n                    <div className= \"start-date-container\">\n                        <label htmlFor= {`start-date-${this.props.index}`}>From: </label>\n                        {startDateField}\n                        {startDateInvalidAlert}\n                    </div>\n                    <div className = \"end-date-container\">\n                        <label htmlFor= {`end-date-${this.props.index}`}>Until: </label>\n                        {endDateField}\n                        {endDateInvalidAlert}\n                    </div>\n                </div>\n                {deleteButton}\n            </div>\n        );\n    }\n}\n\nEducationalExperienceItem.propTypes = {\n    key: PropTypes.number,\n    index: PropTypes.number,\n    schoolName: PropTypes.string,\n    studyTitle: PropTypes.string,\n    startDate: PropTypes.instanceOf(Date),\n    endDate: PropTypes.instanceOf(Date),\n    deleteItem: PropTypes.func,\n    updateItem: PropTypes.func,\n    isEditing: PropTypes.bool,\n};\n\nexport default EducationalExperienceItem;","import React, { Component } from 'react';\nimport EducationalExperienceItem from './EducationalExperienceItem';\nimport PropTypes from 'prop-types';\nimport './EducationalExperience.css';\n\nclass EducationalExperience extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: props.educationalExperienceItems,\n        };\n        this.addNewItem = this.addNewItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n        this.updateItem = this.updateItem.bind(this);\n    }\n\n    updateItem(item, index) {\n        this.setState({\n            items: this.state.items.map((v, i) => {\n                if (i === index) {\n                    return item;\n                }\n                return v;\n            }),\n        });\n    }\n\n    addNewItem() {\n        this.setState({\n            items: this.state.items.concat({\n                schoolName: '',\n                studyTitle: '',\n                startDate: new Date(),\n                endDate: new Date(),\n            }),\n        });\n    }\n\n    deleteItem(index) {\n        this.setState({\n            items: this.state.items.filter((v, i) => i !== index),\n        });\n    }\n\n    componentDidUpdate(previousProps, previousState) {\n        if (previousProps.isEditing && !this.props.isEditing) {\n            this.props.updateEducationInformation(\n                previousState.educationalExperienceItems,\n            );\n        }\n    }\n\n    render() {\n        const educationalExperienceItems = this.state.items\n            .map(\n                (item, index) => {\n                    return (<EducationalExperienceItem\n                        key= {index}\n                        index= {index}\n                        schoolName = {item.schoolName}\n                        studyTitle= {item.studyTitle}\n                        startDate= {item.startDate}\n                        endDate= {item.endDate}\n                        deleteItem= {this.deleteItem}\n                        updateItem= {this.updateItem}\n                        isEditing= {this.props.isEditing}/>\n                    );\n                }\n            );\n            const addItemButton = (this.props.isEditing) ? <button id= \"add-educational-item-button\" onClick= {this.addNewItem}>New</button> : null;\n        \n        return (\n            <div className= \"education\">\n                <h2>Education</h2>\n                {educationalExperienceItems}\n                {addItemButton}\n            </div>\n        );\n    }\n}\n\nEducationalExperience.propTypes = {\n    educationalExperienceItems: PropTypes.array,\n    isEditing: PropTypes.bool,\n    updateEducationInformation: PropTypes.func,\n};\n\nexport default EducationalExperience;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { format, parse } from 'date-fns';\n\nclass PracticalExperienceItem extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            companyNameInputValue: props.companyName,\n            positionTitleInputValue: props.positionTitle,\n            mainTasksInputValue: props.mainTasks,\n            startDateInputValue: format(props.startDate, 'yyyy/MM/dd'),\n            endDateInputValue: format(props.endDate, 'yyyy/MM/dd'),\n            startDateInvalid: false,\n            endDateInvalid: false,\n        }\n        this.updateCompanyNameInputValue = this.updateCompanyNameInputValue.bind(this);\n        this.updatePositionTitleInputValue = this.updatePositionTitleInputValue.bind(this);\n        this.updateMainTasksInputValue = this.updateMainTasksInputValue.bind(this);\n        this.updateStartDateInputValue = this.updateStartDateInputValue.bind(this);\n        this.updateEndDateInputValue = this.updateEndDateInputValue.bind(this);\n    }\n\n    updateCompanyNameInputValue(e) {\n        this.setState({\n            companyNameInputValue: e.target.value,\n        });\n    }\n\n    updatePositionTitleInputValue(e) {\n        this.setState({\n            positionTitleInputValue: e.target.value,\n        });\n    }\n\n    updateMainTasksInputValue(e) {\n        this.setState({\n            mainTasksInputValue: e.target.value,\n        });\n    }\n\n    updateStartDateInputValue(e) {\n        const parsedStartDate = parse(e.target.value, 'yyyy/MM/dd', new Date());\n        if (Number.isNaN(parsedStartDate.getTime())) {\n            this.setState({\n                startDateInvalid: true,\n            });\n        } else {\n            this.setState({\n                startDateInvalid: false,\n            });\n        }\n        this.setState({\n            startDateInputValue: e.target.value,\n        });\n    }\n\n    updateEndDateInputValue(e) {\n        const parsedEndDate = parse(e.target.value, 'yyyy/MM/dd', new Date());\n        if (Number.isNaN(parsedEndDate.getTime())) {\n            this.setState({\n                endDateInvalid: true,\n            });\n        } else {\n            this.setState({\n                endDateInvalid: false,\n            });\n        }\n        this.setState({\n            endDateInputValue: e.target.value,\n        });\n    }\n\n    componentDidUpdate(previousProps, previousState) {\n        if (previousState !== this.state) {\n            this.props.updateItem({\n                companyName: this.state.companyNameInputValue,\n                positionTitle: this.state.positionTitleInputValue,\n                mainTasks: this.state.mainTasksInputValue,\n                startDate: !(this.state.startDateInvalid)\n                    ? parse(this.state.startDateInputValue, 'yyyy/MM/dd', new Date())\n                    : this.props.startDate,\n                endDate: !(this.state.endDateInvalid)\n                    ? parse(this.state.endDateInputValue, 'yyyy/MM/dd', new Date())\n                    : this.props.endDate,\n            }, this.props.index);\n        }\n    }\n\n    render() {\n        const companyNameField = (this.props.isEditing)\n            ? <input\n                value= {this.state.companyNameInputValue}\n                id= {`company-name-${this.props.index}`}\n                className= 'company-name'\n                onChange= {this.updateCompanyNameInputValue}\n            ></input>\n        : <span id= {`company-name-${this.props.index}`}>{this.props.companyName}</span>;\n\n        const positionTitleField = (this.props.isEditing)\n            ? <input\n                value= {this.state.positionTitleInputValue}\n                id= {`position-title-${this.props.index}`}\n                className= 'position-title'\n                onChange= {this.updatePositionTitleInputValue}\n            ></input>\n        : <span id= {`position-title-${this.props.index}`}>{this.props.positionTitle}</span>;\n\n        const mainTasksField = (this.props.isEditing)\n            ? <input\n                value= {this.state.mainTasksInputValue}\n                id= {`main-tasks-${this.props.index}`}\n                className = 'main-tasks'\n                onChange= {this.updateMainTasksInputValue}\n            ></input>\n        : <span id= {`main-tasks-${this.props.index}`}>{this.props.mainTasks}</span>;\n\n        const startDateClasses = (this.state.startDateInvalid)\n            ? 'date invalid-date'\n            : 'date';\n        const endDateClasses = (this.state.endDateInvalid)\n            ? 'date invalid-date'\n            : 'date';\n\n        const startDateField = (this.props.isEditing)\n            ? <input\n                value= {this.state.startDateInputValue}\n                id= {`start-date-${this.props.index}`}\n                className={startDateClasses}\n                onChange= {this.updateStartDateInputValue}\n            ></input>\n        : <span id= {`start-date-${this.props.index}`}>{format(this.props.startDate, 'yyyy/MM/dd')}</span>;\n\n        const endDateField = (this.props.isEditing)\n            ? <input\n                value= {this.state.endDateInputValue}\n                id= {`end-date-${this.props.index}`}\n                className= {endDateClasses}\n                onChange= {this.updateEndDateInputValue}\n            ></input>\n        : <span id= {`end-date-${this.props.index}`}>{format(this.props.endDate, 'yyyy/MM/dd')}</span>;\n\n        const deleteButton = (this.props.isEditing)\n            ? <button\n                className= \"delete-practical-experience-item\"\n                onClick= {() => this.props.deleteItem(this.props.index)}>Delete\n            </button>\n            : null;\n\n        const startDateInvalidAlert = (this.state.startDateInvalid && this.props.isEditing)\n            ? <span>Invalid date</span>\n            : <span></span>;\n        \n        const endDateInvalidAlert = (this.state.endDateInvalid && this.props.isEditing)\n            ? <span>Invalid date</span>\n            : <span></span>;\n        return (\n            <div className= \"practical-experience-item\" key= {this.props.index}>\n                <div className= \"non-date\">\n                    <div className= \"company\">\n                        <label htmlFor= {`company-name-${this.props.index}`}>Company: </label>\n                        {companyNameField}\n                    </div>\n                    <div className= \"position\">\n                        <label htmlFor= {`position-title-${this.props.index}`}>Position: </label>\n                        {positionTitleField}\n                    </div>\n                    <div className= \"tasks\">\n                        <label htmlFor= {`main-tasks-${this.props.index}`}>Main tasks: </label>\n                        {mainTasksField}\n                    </div>\n                </div>\n                <div className= \"date-container\">\n                    <div className= \"start-date-container\">\n                        <label htmlFor= {`start-date-${this.props.index}`}>From: </label>\n                        {startDateField}\n                        {startDateInvalidAlert}\n                    </div>\n                    <div className = \"end-date-container\">\n                        <label htmlFor= {`end-date-${this.props.index}`}>Until: </label>\n                        {endDateField}\n                        {endDateInvalidAlert}\n                    </div>\n                </div>\n                {deleteButton}\n            </div>\n        );\n    }\n}\n\nPracticalExperienceItem.propTypes = {\n    key: PropTypes.number,\n    index: PropTypes.number,\n    companyName: PropTypes.string,\n    positionTitle: PropTypes.string,\n    mainTaks: PropTypes.string,\n    startDate: PropTypes.instanceOf(Date),\n    endDate: PropTypes.instanceOf(Date),\n    deleteItem: PropTypes.func,\n    updateItem: PropTypes.func,\n    isEditing: PropTypes.bool, \n};\n\nexport default PracticalExperienceItem;","import React, { Component } from 'react';\nimport PracticalExperienceItem from './PracticalExperienceItem';\nimport PropTypes from 'prop-types';\nimport './PracticalExperience.css';\n\nclass PracticalExperience extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            items: props.practicalExperienceItems,\n        };\n        this.updateItem = this.updateItem.bind(this);\n        this.addNewItem = this.addNewItem.bind(this);\n        this.deleteItem = this.deleteItem.bind(this);\n    }\n\n    updateItem(item, index) {\n        this.setState({\n            items: this.state.items.map((v, i) => {\n                if (i === index) {\n                    return item;\n                }\n                return v;\n            }),\n        });\n    }\n\n    addNewItem() {\n        this.setState({\n            items: this.state.items.concat({\n                companyName: '',\n                positionTitle: '',\n                mainTasks: '',\n                startDate: new Date(),\n                endDate: new Date(),\n            }),\n        });\n    }\n\n    deleteItem(index) {\n        this.setState({\n            items: this.state.items.filter((v, i) => i !== index),\n        });\n    }\n\n    componentDidUpdate(previousProps, previousState) {\n        if (previousProps.isEditing && !this.props.isEditing) {\n            this.props.updateWorkInformation(\n                previousState.practicalExperienceItems,\n            );\n        }\n    }\n\n    render() {\n        const practicalExperienceItems = this.state.items\n            .map(\n                (item, index) => {\n                    return (<PracticalExperienceItem\n                        key= {index}\n                        index= {index}\n                        companyName = {item.companyName}\n                        positionTitle= {item.positionTitle}\n                        mainTasks= {item.mainTasks}\n                        startDate= {item.startDate}\n                        endDate= {item.endDate}\n                        deleteItem= {this.deleteItem}\n                        updateItem= {this.updateItem}\n                        isEditing= {this.props.isEditing}/>\n                    );\n                }\n            );\n            const addItemButton = (this.props.isEditing) ? <button id= \"add-practical-item-button\" onClick= {this.addNewItem}>New</button> : null;\n        \n        return (\n            <div className= \"work\">\n                <h2>Work Experience</h2>\n                {practicalExperienceItems}\n                {addItemButton}\n            </div>\n        );\n    }\n}\n\nPracticalExperience.propTypes = {\n    practicalExperienceItems: PropTypes.array,\n    isEditing: PropTypes.bool,\n    updateWorkInformation: PropTypes.func,\n};\n\nexport default PracticalExperience;","import React, { Component } from 'react';\nimport IdentityInformation from './components/IdentityInformation';\nimport EducationalExperience from './components/EducationalExperience';\nimport PracticalExperience from './components/PracticalExperience';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      email: '',\n      phone: '',\n      educationalExperienceItems: [],\n      practicalExperienceItems: [],\n      isEditing: true,\n    };\n\n    this.updateCVInformation = this.updateCVInformation.bind(this);\n    this.updateIdentityInformation = this.updateIdentityInformation.bind(this);\n    this.updateEducationInformation = this.updateEducationInformation.bind(this);\n    this.updateWorkInformation = this.updateWorkInformation.bind(this);\n    this.editCV = this.editCV.bind(this);\n  }\n\n  updateCVInformation() {\n    this.setState({\n      isEditing: false,\n    });\n  }\n\n  updateIdentityInformation(name, email, phone) {\n    this.setState({\n      name: name,\n      email: email,\n      phone: phone,\n    });\n  }\n\n  updateEducationInformation(educationalExperienceItems) {\n    this.setState({\n      educationalExperienceItems: educationalExperienceItems,\n    });\n  }\n\n  updateWorkInformation(practicalExperienceItems) {\n    this.setState({\n      practicalExperienceItems: practicalExperienceItems,\n    });\n  }\n\n  editCV() {\n    this.setState({\n      isEditing: true,\n    });\n  }\n\n  render () {\n    const button = (this.state.isEditing)\n      ? <button id= \"submit-CV-button\" type= \"submit\" onClick= {this.updateCVInformation}>Submit</button>\n      : <button id= \"edit-CV-button\" onClick = {this.editCV}>Edit</button>;\n\n    return (\n      <div className=\"App\">\n        <form onSubmit= {(e) => e.preventDefault()}>\n          <IdentityInformation name= {this.state.name} email= {this.state.email} phone= {this.state.phone} isEditing= {this.state.isEditing} updateIdentityInformation= {this.updateIdentityInformation}/>\n          <EducationalExperience educationalExperienceItems= {this.state.educationalExperienceItems} isEditing = {this.state.isEditing} updateEducationInformation = {this.updateEducationInformation}/>\n          <PracticalExperience practicalExperienceItems= {this.state.practicalExperienceItems} isEditing = {this.state.isEditing} updateWorkInformation = {this.updateWorkInformation}/>\n          {button}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}